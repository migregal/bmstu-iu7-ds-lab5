// Code generated by mockery v2.33.3. DO NOT EDIT.

package libraries

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockClient is an autogenerated mock type for the Client type
type MockClient struct {
	mock.Mock
}

type MockClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockClient) EXPECT() *MockClient_Expecter {
	return &MockClient_Expecter{mock: &_m.Mock}
}

// GetLibraries provides a mock function with given fields: ctx, city, page, size
func (_m *MockClient) GetLibraries(ctx context.Context, city string, page uint64, size uint64) (Libraries, error) {
	ret := _m.Called(ctx, city, page, size)

	var r0 Libraries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) (Libraries, error)); ok {
		return rf(ctx, city, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, uint64, uint64) Libraries); ok {
		r0 = rf(ctx, city, page, size)
	} else {
		r0 = ret.Get(0).(Libraries)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, uint64, uint64) error); ok {
		r1 = rf(ctx, city, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLibraries_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraries'
type MockClient_GetLibraries_Call struct {
	*mock.Call
}

// GetLibraries is a helper method to define mock.On call
//   - ctx context.Context
//   - city string
//   - page uint64
//   - size uint64
func (_e *MockClient_Expecter) GetLibraries(ctx interface{}, city interface{}, page interface{}, size interface{}) *MockClient_GetLibraries_Call {
	return &MockClient_GetLibraries_Call{Call: _e.mock.On("GetLibraries", ctx, city, page, size)}
}

func (_c *MockClient_GetLibraries_Call) Run(run func(ctx context.Context, city string, page uint64, size uint64)) *MockClient_GetLibraries_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(uint64), args[3].(uint64))
	})
	return _c
}

func (_c *MockClient_GetLibraries_Call) Return(_a0 Libraries, _a1 error) *MockClient_GetLibraries_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLibraries_Call) RunAndReturn(run func(context.Context, string, uint64, uint64) (Libraries, error)) *MockClient_GetLibraries_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibrariesByIDs provides a mock function with given fields: ctx, ids
func (_m *MockClient) GetLibrariesByIDs(ctx context.Context, ids []string) (Libraries, error) {
	ret := _m.Called(ctx, ids)

	var r0 Libraries
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (Libraries, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) Libraries); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(Libraries)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLibrariesByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibrariesByIDs'
type MockClient_GetLibrariesByIDs_Call struct {
	*mock.Call
}

// GetLibrariesByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *MockClient_Expecter) GetLibrariesByIDs(ctx interface{}, ids interface{}) *MockClient_GetLibrariesByIDs_Call {
	return &MockClient_GetLibrariesByIDs_Call{Call: _e.mock.On("GetLibrariesByIDs", ctx, ids)}
}

func (_c *MockClient_GetLibrariesByIDs_Call) Run(run func(ctx context.Context, ids []string)) *MockClient_GetLibrariesByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockClient_GetLibrariesByIDs_Call) Return(_a0 Libraries, _a1 error) *MockClient_GetLibrariesByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLibrariesByIDs_Call) RunAndReturn(run func(context.Context, []string) (Libraries, error)) *MockClient_GetLibrariesByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibraryBooks provides a mock function with given fields: ctx, libraryID, showAll, page, size
func (_m *MockClient) GetLibraryBooks(ctx context.Context, libraryID string, showAll bool, page uint64, size uint64) (LibraryBooks, error) {
	ret := _m.Called(ctx, libraryID, showAll, page, size)

	var r0 LibraryBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, uint64, uint64) (LibraryBooks, error)); ok {
		return rf(ctx, libraryID, showAll, page, size)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool, uint64, uint64) LibraryBooks); ok {
		r0 = rf(ctx, libraryID, showAll, page, size)
	} else {
		r0 = ret.Get(0).(LibraryBooks)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool, uint64, uint64) error); ok {
		r1 = rf(ctx, libraryID, showAll, page, size)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLibraryBooks_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraryBooks'
type MockClient_GetLibraryBooks_Call struct {
	*mock.Call
}

// GetLibraryBooks is a helper method to define mock.On call
//   - ctx context.Context
//   - libraryID string
//   - showAll bool
//   - page uint64
//   - size uint64
func (_e *MockClient_Expecter) GetLibraryBooks(ctx interface{}, libraryID interface{}, showAll interface{}, page interface{}, size interface{}) *MockClient_GetLibraryBooks_Call {
	return &MockClient_GetLibraryBooks_Call{Call: _e.mock.On("GetLibraryBooks", ctx, libraryID, showAll, page, size)}
}

func (_c *MockClient_GetLibraryBooks_Call) Run(run func(ctx context.Context, libraryID string, showAll bool, page uint64, size uint64)) *MockClient_GetLibraryBooks_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool), args[3].(uint64), args[4].(uint64))
	})
	return _c
}

func (_c *MockClient_GetLibraryBooks_Call) Return(_a0 LibraryBooks, _a1 error) *MockClient_GetLibraryBooks_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLibraryBooks_Call) RunAndReturn(run func(context.Context, string, bool, uint64, uint64) (LibraryBooks, error)) *MockClient_GetLibraryBooks_Call {
	_c.Call.Return(run)
	return _c
}

// GetLibraryBooksByIDs provides a mock function with given fields: ctx, ids
func (_m *MockClient) GetLibraryBooksByIDs(ctx context.Context, ids []string) (LibraryBooks, error) {
	ret := _m.Called(ctx, ids)

	var r0 LibraryBooks
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (LibraryBooks, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) LibraryBooks); ok {
		r0 = rf(ctx, ids)
	} else {
		r0 = ret.Get(0).(LibraryBooks)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_GetLibraryBooksByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLibraryBooksByIDs'
type MockClient_GetLibraryBooksByIDs_Call struct {
	*mock.Call
}

// GetLibraryBooksByIDs is a helper method to define mock.On call
//   - ctx context.Context
//   - ids []string
func (_e *MockClient_Expecter) GetLibraryBooksByIDs(ctx interface{}, ids interface{}) *MockClient_GetLibraryBooksByIDs_Call {
	return &MockClient_GetLibraryBooksByIDs_Call{Call: _e.mock.On("GetLibraryBooksByIDs", ctx, ids)}
}

func (_c *MockClient_GetLibraryBooksByIDs_Call) Run(run func(ctx context.Context, ids []string)) *MockClient_GetLibraryBooksByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockClient_GetLibraryBooksByIDs_Call) Return(_a0 LibraryBooks, _a1 error) *MockClient_GetLibraryBooksByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_GetLibraryBooksByIDs_Call) RunAndReturn(run func(context.Context, []string) (LibraryBooks, error)) *MockClient_GetLibraryBooksByIDs_Call {
	_c.Call.Return(run)
	return _c
}

// ReturnBookToLibrary provides a mock function with given fields: ctx, libraryID, bookID
func (_m *MockClient) ReturnBookToLibrary(ctx context.Context, libraryID string, bookID string) (Book, error) {
	ret := _m.Called(ctx, libraryID, bookID)

	var r0 Book
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (Book, error)); ok {
		return rf(ctx, libraryID, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) Book); ok {
		r0 = rf(ctx, libraryID, bookID)
	} else {
		r0 = ret.Get(0).(Book)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, libraryID, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_ReturnBookToLibrary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ReturnBookToLibrary'
type MockClient_ReturnBookToLibrary_Call struct {
	*mock.Call
}

// ReturnBookToLibrary is a helper method to define mock.On call
//   - ctx context.Context
//   - libraryID string
//   - bookID string
func (_e *MockClient_Expecter) ReturnBookToLibrary(ctx interface{}, libraryID interface{}, bookID interface{}) *MockClient_ReturnBookToLibrary_Call {
	return &MockClient_ReturnBookToLibrary_Call{Call: _e.mock.On("ReturnBookToLibrary", ctx, libraryID, bookID)}
}

func (_c *MockClient_ReturnBookToLibrary_Call) Run(run func(ctx context.Context, libraryID string, bookID string)) *MockClient_ReturnBookToLibrary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_ReturnBookToLibrary_Call) Return(_a0 Book, _a1 error) *MockClient_ReturnBookToLibrary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_ReturnBookToLibrary_Call) RunAndReturn(run func(context.Context, string, string) (Book, error)) *MockClient_ReturnBookToLibrary_Call {
	_c.Call.Return(run)
	return _c
}

// TakeBookFromLibrary provides a mock function with given fields: ctx, libraryID, bookID
func (_m *MockClient) TakeBookFromLibrary(ctx context.Context, libraryID string, bookID string) (ReservedBook, error) {
	ret := _m.Called(ctx, libraryID, bookID)

	var r0 ReservedBook
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (ReservedBook, error)); ok {
		return rf(ctx, libraryID, bookID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ReservedBook); ok {
		r0 = rf(ctx, libraryID, bookID)
	} else {
		r0 = ret.Get(0).(ReservedBook)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, libraryID, bookID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockClient_TakeBookFromLibrary_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TakeBookFromLibrary'
type MockClient_TakeBookFromLibrary_Call struct {
	*mock.Call
}

// TakeBookFromLibrary is a helper method to define mock.On call
//   - ctx context.Context
//   - libraryID string
//   - bookID string
func (_e *MockClient_Expecter) TakeBookFromLibrary(ctx interface{}, libraryID interface{}, bookID interface{}) *MockClient_TakeBookFromLibrary_Call {
	return &MockClient_TakeBookFromLibrary_Call{Call: _e.mock.On("TakeBookFromLibrary", ctx, libraryID, bookID)}
}

func (_c *MockClient_TakeBookFromLibrary_Call) Run(run func(ctx context.Context, libraryID string, bookID string)) *MockClient_TakeBookFromLibrary_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockClient_TakeBookFromLibrary_Call) Return(_a0 ReservedBook, _a1 error) *MockClient_TakeBookFromLibrary_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockClient_TakeBookFromLibrary_Call) RunAndReturn(run func(context.Context, string, string) (ReservedBook, error)) *MockClient_TakeBookFromLibrary_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockClient creates a new instance of MockClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockClient {
	mock := &MockClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
